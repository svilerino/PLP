TestCase subclass: #Ej1KindOfTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLPFormulaTests'!!Ej1KindOfTest methodsFor: 'testing' stamp: 'PLP 6/3/2016 10:25'!test02allFormulasAreFormulas| p q r f1 f2 f3 f4 |p := PropositionalVariable named: #P.q := PropositionalVariable named: #Q.r := PropositionalVariable named: #R.f1 := Negation of: p.f2 := Conjunction of: f1 and: q.f3 := Disjunction of: p and: r.f4 := Implication of: f3 and: r.self assert: (r isKindOf: PropositionalVariable).self assert: (f1 isKindOf: PropositionalFormula).self assert: (f2 isKindOf: PropositionalFormula).self assert: (f3 isKindOf: PropositionalFormula).self assert: (f4 isKindOf: PropositionalFormula).! !!Ej1KindOfTest methodsFor: 'testing' stamp: 'PLP 6/3/2016 10:24'!test01EachFormulaTypeIsKindOfItsOwnClass| p q r f1 f2 f3 f4 |p := PropositionalVariable named: #P.q := PropositionalVariable named: #Q.r := PropositionalVariable named: #R.f1 := Negation of: p.f2 := Conjunction of: f1 and: q.f3 := Disjunction of: p and: r.f4 := Implication of: f3 and: r.self assert: (r isKindOf: PropositionalVariable).self assert: (f1 isKindOf: Negation).self assert: (f2 isKindOf: Conjunction).self assert: (f3 isKindOf: Disjunction).self assert: (f4 isKindOf: Implication).! !TestCase subclass: #Ej2AllPropVarsTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLPFormulaTests'!!Ej2AllPropVarsTest methodsFor: 'testing' stamp: 'PLP 6/3/2016 10:36'!test03PropositionalVariablesAreEnumeratedCorrectly| p q r  f1 f2 f3 f4 f5 vars1 vars2|p := PropositionalVariable named: #P.q := PropositionalVariable named: #Q.r := PropositionalVariable named: #R.vars1 := Set with: #P with: #Q.vars2 := Set with: #P with: #Q with: #R.f1 := Conjunction of: p and: q.f2 := Disjunction of: p and: q.f3 := Negation of: r.f4 := Implication of: f1 and: f2.f5 := Negation of: (Conjunction of: f4 and: (Disjunction of: p and: f3)).self assert: f1 allPropVars = vars1.self assert: f2 allPropVars = vars1.self assert: f3 allPropVars = (Set with: #R).self assert: f4 allPropVars = vars1.self assert: f5 allPropVars = vars2.! !TestCase subclass: #Ej3ValueTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLPFormulaTests'!!Ej3ValueTest methodsFor: 'testing' stamp: 'PLP 6/3/2016 10:49'!test04FormulasAreEvaluatedCorrectly| p q r f1 f2 f3 f4 f5 vars1 vars2 vars3|p := PropositionalVariable named: #P.q := PropositionalVariable named: #Q.r := PropositionalVariable named: #R.vars1 := Set with: #P with: #Q.vars2 := Set with: #Q with: #R.vars3 := Set with: #P with: #Q with: #R.f1 := Conjunction of: p and: q.f2 := Disjunction of: p and: q.f3 := Negation of: r.f4 := Implication of: f1 and: f2.f5 := Implication of: f1 and: r.self assert: (f1 value: vars1).self assert: (f1 value: vars2) not.self assert: (f1 value: vars3).self assert: (f2 value: vars1).self assert: (f2 value: vars2).self assert: (f2 value: vars3).self assert: (f2 value: Set new) not.self assert: (f3 value: vars1).self assert: (f3 value: vars2) not.self assert: (f4 value: vars1).self assert: (f4 value: vars2).self assert: (f4 value: vars3).self assert: (f4 value: Set new).self assert: (f5 value: Set new).self assert: (f5 value: vars1) not.self assert: (f5 value: vars2).self assert: (f5 value: vars3).! !TestCase subclass: #Ej4PrettyFormulaConstructionTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLPFormulaTests'!!Ej4PrettyFormulaConstructionTest methodsFor: 'testing' stamp: 'PLP 6/3/2016 10:55'!test05WeCanBuildPrettyFormulas|p q r|p := PropositionalVariable named: #P.q := PropositionalVariable named: #Q.r := PropositionalVariable named: #R.self assert: (p not isKindOf: Negation).self assert: (q & r isKindOf: Conjunction).self assert: (p | (q & r) isKindOf: Disjunction).self assert: ((p | q) ==> r isKindOf: Implication).! !TestCase subclass: #Ej5StringConversionTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLPFormulaTests'!!Ej5StringConversionTest methodsFor: 'testing' stamp: 'PLP 6/3/2016 11:04'!test06WeCanConvertFormulasToStrings	| p q r  f1 f2 f3 f4 f5 |p := PropositionalVariable named: #P.q := PropositionalVariable named: #Q.r := PropositionalVariable named: #R.f1 := p & q.f2 := r not.f3 := f1 ==> f2.f4 := ((( p & q ) ==> ( p | q )) & ( p | r not))not.f5 := ((p ==> q) & r & (p & q not | r not)) not.self assert: f1 asString equals: 'P & Q'.self assert: f2 asString equals: '¬R'.self assert: f3 asString equals: '( P & Q ) ==> ¬R'.self assert: f4 asString equals: '¬( ( ( P & Q ) ==> ( P | Q ) ) & ( P | ¬R ) )'.self assert: f5 asString equals: '¬( ( ( P ==> Q ) & R ) & ( ( P & ¬Q ) | ¬R ) )'.! !!Ej5StringConversionTest methodsFor: 'testing' stamp: 'PLP 6/3/2016 11:05'!test07FormulasShowAsTheirStringRepresentation	| p q r  f1 f2 f3 f4 f5 |p := PropositionalVariable named: #P.q := PropositionalVariable named: #Q.r := PropositionalVariable named: #R.f1 := p & q.f2 := r not.f3 := f1 ==> f2.f4 := ((( p & q ) ==> ( p | q )) & ( p | r not))not.f5 := ((p ==> q) & r & (p & q not | r not)) not.self assert: f1 printString equals: 'P & Q'.self assert: f2 printString equals: '¬R'.self assert: f3 printString equals: '( P & Q ) ==> ¬R'.self assert: f4 printString equals: '¬( ( ( P & Q ) ==> ( P | Q ) ) & ( P | ¬R ) )'.self assert: f5 printString equals: '¬( ( ( P ==> Q ) & R ) & ( ( P & ¬Q ) | ¬R ) )'.! !TestCase subclass: #Ej6EqualityTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLPFormulaTests'!!Ej6EqualityTest methodsFor: 'testing' stamp: 'PLP 6/3/2016 11:26'!test09WeCanUseHash	| p q r f1 f2 f3 f4 f5 |	p := PropositionalVariable named: #P.	q := PropositionalVariable named: #Q.	r := PropositionalVariable named: #R.	f1 := p & q.	f2 := r not.	f3 := f1 ==> f2.	f4 := ((p & q) ==> (p | q) & (p | r not)) not.	f5 := Disjunction of: r and: f3.	self assert: f1 hash equals: (Conjunction of: p and: q) hash.	self assert: f2 hash equals: (Negation of: r) hash.	self assert: f3 hash equals: (Implication of: f1 and: f2) hash.	self		assert: ((Conjunction of: (Conjunction of: p and: q) ==> (Disjunction of: p and: q) and: (Disjunction of: p and: (Negation of: r)))) not hash		equals: f4 hash.	self assert: f5 hash equals: (r | ((p & q) ==> f2)) hash.	self assert: f1 hash ~= f2 hash.	self assert: p hash ~= q hash.	self assert: f4 hash ~= f5 hash.	self assert: f4 hash ~= f2 hash! !!Ej6EqualityTest methodsFor: 'testing' stamp: 'PLP 6/3/2016 11:22'!test08WeCanCompareFormulas	| p q r f1 f2 f3 f4 f5 |	p := PropositionalVariable named: #P.	q := PropositionalVariable named: #Q.	r := PropositionalVariable named: #R.	f1 := p & q.	f2 := r not.	f3 := f1 ==> f2.	f4 := ((p & q) ==> (p | q) & (p | r not)) not.	f5 := Disjunction of: r and: f3.	self assert: f1 equals: (Conjunction of: p and: q).	self assert: f2 equals: (Negation of: r).	self assert: f3 equals: (Implication of: f1 and: f2).	self		assert: ((Conjunction of: (Conjunction of: p and: q) ==> (Disjunction of: p and: q) and: (Disjunction of: p and: (Negation of: r)))) not		equals: f4.	self assert: f5 equals: r | ((p & q) ==> f2).	self assert: f1 ~= f2.	self assert: p ~= q.	self assert: f4 ~= f5.	self assert: f4 ~= f2! !TestCase subclass: #Ej7NegatedNormalFormTest	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLPFormulaTests'!!Ej7NegatedNormalFormTest methodsFor: 'testing' stamp: 'PLP 6/3/2016 11:36'!test10WeCanConvertToNegatedNormalForm| p q r f1 f2 f3 f4 f5 |p := PropositionalVariable named: #P.q := PropositionalVariable named: #Q.r := PropositionalVariable named: #R.f1 := p & q.f2 := p | q.f3 := r not not.f4 := f1 ==> f2.f5 := ((p ==> q) & r & (p & q not | r not)) not.self assert: f1 toNNF equals: f1.self assert: f2 toNNF equals: f2.self assert: f3 toNNF equals: r.self assert: f4 toNNF equals: ( p not | q not ) | ( p | q ).self assert: f5 toNNF equals: ( ( p & q not ) | r not ) | ( ( p not | q ) & r ).! !!Ej7NegatedNormalFormTest methodsFor: 'testing' stamp: 'PLP 6/3/2016 11:31'!test09WeCanNegateFormulas| p q r f1 f2 f3 f4 f5 |p := PropositionalVariable named: #P.q := PropositionalVariable named: #Q.r := PropositionalVariable named: #R.f1 := p & q.f2 := p | q.f3 := r not.f4 := f1 ==> f2.f5 := ((p ==> q) & r & (p & q not | r not)) not.self assert: f1 negate equals: p not | q not.self assert: f2 negate equals: p not & q not.self assert: f3 negate equals: r.self assert: f4 negate equals: ( p & q ) & ( p not & q not ).self assert: f5 negate equals: ( ( p ==> q ) & r ) & ( ( p & q not ) | r not ).! !!Ej7NegatedNormalFormTest methodsFor: 'testing' stamp: 'PLP 6/3/2016 11:39'!test11NNFofNegationBehavesCorrectly| p q r f1 f2 f3 f4 f5 |p := PropositionalVariable named: #P.q := PropositionalVariable named: #Q.r := PropositionalVariable named: #R.f1 := p & q.f2 := p | q.f3 := r not not.f4 := f1 ==> f2.f5 := ((p ==> q) & r & (p & q not | r not)) not.self assert: f1 not toNNF equals: f1 toNNF negate.self assert: f2 not toNNF equals: f2 toNNF negate.self assert: f3 not toNNF equals: f3 toNNF negate.self assert: f4 not toNNF equals: f4 toNNF negate.self assert: f5 not toNNF equals: f5 toNNF negate.! !PackageManifest subclass: #ManifestPLPFormulaTests	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLPFormulaTests'!!ManifestPLPFormulaTests commentStamp: '<historical>' prior: 0!I store metadata for this package. These meta data are used by other tools such as the SmalllintManifestChecker and the critics Browser!"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!ManifestPLPFormulaTests class	instanceVariableNames: ''!!ManifestPLPFormulaTests class methodsFor: 'code-critics' stamp: 'PLP 6/3/2016 10:49'!ruleRBLongMethodsRuleV1FalsePositive	^ #(#(#(#RGClassDefinition #(#Ej3ValueTest)) #'2016-06-03T10:49:56.479266-03:00') )! !Object subclass: #PropositionalFormula	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLPFormulaTests'!!PropositionalFormula commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!PropositionalFormula methodsFor: 'converting' stamp: 'FedeAllocati 6/8/2016 17:37'!asString	self subclassResponsibility! !!PropositionalFormula methodsFor: 'evaluating' stamp: 'FedeAllocati 6/8/2016 17:37'!value: aCollection 	self subclassResponsibility! !!PropositionalFormula methodsFor: 'query' stamp: 'FedeAllocati 6/8/2016 17:37'!allPropVars	self subclassResponsibility.! !!PropositionalFormula methodsFor: 'printing' stamp: 'FedeAllocati 6/8/2016 17:37'!printString	^self asString! !!PropositionalFormula methodsFor: 'logical operations' stamp: 'FedeAllocati 6/8/2016 17:37'!| aFormula 	^Disjunction of: self and: aFormula! !!PropositionalFormula methodsFor: 'logical operations' stamp: 'FedeAllocati 6/8/2016 17:37'!not	^Negation of: self! !!PropositionalFormula methodsFor: 'logical operations' stamp: 'FedeAllocati 6/8/2016 17:36'!& aFormula 	^Conjunction of: self and: aFormula! !!PropositionalFormula methodsFor: 'logical operations' stamp: 'FedeAllocati 6/8/2016 17:36'!==> aFormula 	^Implication of: self and: aFormula! !PropositionalFormula subclass: #BinaryFormula	instanceVariableNames: 'formula1 formula2'	classVariableNames: ''	poolDictionaries: ''	category: 'PLPFormulaTests'!!BinaryFormula commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	formula1:		<Object>	formula2:		<Object>    Implementation Points!!BinaryFormula methodsFor: 'double dispatch' stamp: 'FedeAllocati 6/8/2016 17:38'!asStringFromBinary	^'( ', self asString, ' )'! !!BinaryFormula methodsFor: 'double dispatch' stamp: 'FedeAllocati 6/8/2016 17:38'!asStringFromNegation	^'( ', self asString, ' )'! !!BinaryFormula methodsFor: 'query' stamp: 'FedeAllocati 6/8/2016 17:35'!allPropVars	^formula1 allPropVars union: formula2 allPropVars! !!BinaryFormula methodsFor: 'private' stamp: 'FedericoAllocati 6/8/2016 16:13'!operation	self subclassResponsibility! !!BinaryFormula methodsFor: 'converting' stamp: 'FedeAllocati 6/8/2016 17:35'!asString	^formula1 asStringFromBinary, ' ', self operation, ' ', formula2 asStringFromBinary.! !!BinaryFormula methodsFor: 'evaluating' stamp: 'FedericoAllocati 6/8/2016 16:15'!value: aValuationSet 	^(formula1 value: aValuationSet) perform: self operation with: (formula2 value: aValuationSet)! !!BinaryFormula methodsFor: 'initialization' stamp: 'FedeAllocati 6/8/2016 17:36'!from: aFormula and: anotherFormula 	formula1 := aFormula.	formula2 := anotherFormula.! !BinaryFormula subclass: #Conjunction	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLPFormulaTests'!!Conjunction commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Conjunction methodsFor: 'private' stamp: 'FedericoAllocati 6/8/2016 16:13'!operation	^#&! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Conjunction class	instanceVariableNames: ''!!Conjunction class methodsFor: 'instance creation' stamp: 'svilerino 6/8/2016 15:09'!of: aFormula and: anotherFormula 	^ (self new) from: aFormula and: anotherFormula ! !BinaryFormula subclass: #Disjunction	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLPFormulaTests'!!Disjunction commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Disjunction methodsFor: 'private' stamp: 'FedericoAllocati 6/8/2016 16:14'!operation	^#|! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Disjunction class	instanceVariableNames: ''!!Disjunction class methodsFor: 'instance creation' stamp: 'svilerino 6/8/2016 15:11'!of: aFormula and: anotherFormula 	^ (self new) from: aFormula and: anotherFormula! !BinaryFormula subclass: #Implication	instanceVariableNames: ''	classVariableNames: ''	poolDictionaries: ''	category: 'PLPFormulaTests'!!Implication commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Implementation Points!!Implication methodsFor: 'private' stamp: 'FedericoAllocati 6/8/2016 16:14'!operation	^#==>! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Implication class	instanceVariableNames: ''!!Implication class methodsFor: 'instance creation' stamp: 'svilerino 6/8/2016 15:13'!of: aFormula and: anotherFormula 	^(self new) from: aFormula and: anotherFormula! !PropositionalFormula subclass: #Negation	instanceVariableNames: 'formula'	classVariableNames: ''	poolDictionaries: ''	category: 'PLPFormulaTests'!!Negation commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	formula:		<Object>    Implementation Points!!Negation methodsFor: 'double dispatch' stamp: 'FedeAllocati 6/8/2016 17:32'!asStringFromBinary	^self asString! !!Negation methodsFor: 'double dispatch' stamp: 'FedeAllocati 6/8/2016 17:32'!asStringFromNegation	^self asString! !!Negation methodsFor: 'converting' stamp: 'FedeAllocati 6/8/2016 17:32'!asString	^'¬', (formula asStringFromNegation)! !!Negation methodsFor: 'evaluating' stamp: 'FedericoAllocati 6/8/2016 16:15'!value: aValuationSet 	^(formula value: aValuationSet) not! !!Negation methodsFor: 'query' stamp: 'FedeAllocati 6/8/2016 17:32'!allPropVars	^formula allPropVars.! !!Negation methodsFor: 'initialization' stamp: 'FedeAllocati 6/8/2016 17:33'!of: aFormula	formula := aFormula.! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!Negation class	instanceVariableNames: ''!!Negation class methodsFor: 'instance creation' stamp: 'svilerino 6/8/2016 15:04'!of: aFormula 	^(self new) of:aFormula! !PropositionalFormula subclass: #PropositionalVariable	instanceVariableNames: 'name'	classVariableNames: ''	poolDictionaries: ''	category: 'PLPFormulaTests'!!PropositionalVariable commentStamp: '<historical>' prior: 0!Please comment me using the following template inspired by Class Responsibility Collaborator (CRC) design:For the Class part:  State a one line summary. For example, "I represent a paragraph of text".For the Responsibility part: Three sentences about my main responsibilities - what I do, what I know.For the Collaborators Part: State my main collaborators and one line about how I interact with them. Public API and Key Messages- message one   - message two - (for bonus points) how to create instances.   One simple example is simply gorgeous. Internal Representation and Key Implementation Points.    Instance Variables	name:		<Object>    Implementation Points!!PropositionalVariable methodsFor: 'evaluating' stamp: 'FedericoAllocati 6/8/2016 16:15'!value: aValuationSet 	^aValuationSet includes: name! !!PropositionalVariable methodsFor: 'query' stamp: 'FedeAllocati 6/8/2016 17:34'!allPropVars	^Set with: name! !!PropositionalVariable methodsFor: 'double dispatch' stamp: 'FedeAllocati 6/8/2016 17:34'!asStringFromBinary	^self asString! !!PropositionalVariable methodsFor: 'double dispatch' stamp: 'FedeAllocati 6/8/2016 17:34'!asStringFromNegation	^self asString! !!PropositionalVariable methodsFor: 'converting' stamp: 'FedeAllocati 6/8/2016 17:34'!asString	^name.! !!PropositionalVariable methodsFor: 'initialization' stamp: 'FedeAllocati 6/8/2016 17:34'!name: aName	name := aName! !"-- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- -- "!PropositionalVariable class	instanceVariableNames: ''!!PropositionalVariable class methodsFor: 'instance creation' stamp: 'svilerino 6/8/2016 15:02'!named: aName 	^ (self new) name: aName! !